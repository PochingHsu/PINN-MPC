import numpy as np
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter


def BldgEnergyPlot(t_room, t_amb, t_set, ac_onoff, tevap, power):
    fig, (ax1, ax2) = plt.subplots(2, 1, layout='constrained')
    value = np.timedelta64(1, 'm')
    times = np.arange(np.datetime64('2023-08-15 09:00:00'), np.datetime64('2023-08-15 17:00:00'), value)
    ax1.plot(times, t_room[:-1], label='T_room')
    ax1.plot(times, t_amb, label='T_amb')
    ax1.plot(times, tevap, label='T_supply')
    ax1.plot(times, t_set+2, label='T_set_ub')
    ax1.plot(times, t_set-2, label='T_set_lb')
    ax1.set_xlabel('Time [min]')
    ax1.set_ylabel('Temperature [C]')
    ax1.legend(loc='best',fontsize="8",ncol=2)
    date_form = DateFormatter("%H:%M")
    ax1.xaxis.set_major_formatter(date_form)
    ax2.plot(times, ac_onoff)
    ax2.set_xlabel('Time [min]')
    ax2.set_ylabel('AC on/off')
    ax2.xaxis.set_major_formatter(date_form)
    plt.show()


def testplot(yact, ypred):
    fig, ax1 = plt.subplots(1, 1, layout='constrained')
    value = np.timedelta64(1, 'm')
    times = np.arange(np.datetime64('2023-08-15 14:36:00'), np.datetime64('2023-08-15 17:00:00'), value)
    ax1.plot(times, yact, label='T_room_actual')
    ax1.plot(times, ypred, label='T_room_predict')
    ax1.set_xlabel('Time [min]')
    ax1.set_ylabel('Temperature [C]')
    ax1.legend(loc='best')
    date_form = DateFormatter("%H:%M")
    ax1.xaxis.set_major_formatter(date_form)
    plt.show()


def MPCplot(y,xpint, u, E):
    #fig, ax1 = plt.subplots(figsize=(12, 6))
    fig, (ax1, ax2) = plt.subplots(2, 1, layout='constrained')
    t_set = 22 * np.ones(y.shape[0])
    value = np.timedelta64(1, 'm')
    times = np.arange(np.datetime64('2023-08-15 14:36:00'), np.datetime64('2023-08-15 17:00:00'), value)
    ax1.plot(times, y, label='T_room_actual')
    ax1.plot(times, xpint, label='T_room_predict')
    ax1.plot(times, u, label='T_supply')
    #ax1.plot(times, t_set, 'd-', label='T_set')
    ax1.plot(times, t_set+2, '-', label='T_set_ub')
    ax1.plot(times, t_set-2, '-', label='T_set_lb')
    ax1.set_xlabel('Time [min]')
    ax1.set_ylabel('Temperature [C]')
    ax1.legend(loc='best',fontsize="8",ncol=2)
    date_form = DateFormatter("%H:%M")
    ax1.xaxis.set_major_formatter(date_form)
    ax1.set_ylim(10, 25)
    #plt.show()
    #fig, ax1 = plt.subplots(figsize=(12, 6))
    #value = np.timedelta64(1, 'm')
    times = np.arange(np.datetime64('2023-08-15 14:36:00'), np.datetime64('2023-08-15 17:00:00'), value)
    ax2.plot(times[1:], E[1:])
    ax2.set_xlabel('Time [min]')
    ax2.set_ylabel('Power Consumption [W]')
    #ax1.legend()
    date_form = DateFormatter("%H:%M")
    ax2.xaxis.set_major_formatter(date_form)
    ax2.set_ylim(0, 1000)
    plt.show()
    print("\nEnergy Consumption [kWh]: ", np.sum(E)/1000/60)
